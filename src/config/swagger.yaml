openapi: "3.0.2"
info:
  title: Login Managment API
  version: 1.0.0
servers:
  - url: "http://localhost:3000/"
    description: Local application
paths:
  /:
    get:
      description: healthcheck
      operationId: healthCheck
      responses:
        "200":
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
  /login:
    post:
      description: Login to the application
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDetails"
      responses:
        "200":
          description: Successfull Login
          headers:
            session:
              description: header value containing the JWT for the session
              schema:
                type: string
            Set-Cookie:
              description: set cookie with the jwt for the session
              schema:
                type: string
                example: sessionid=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
        "401":
          description: Username and password combination is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Username not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /logout:
    get:
      description: Logout from the application
      operationId: logout
      responses:
        "204":
          description: Successfull logout
  
  /user:
    post:
      description: Create user of the application
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
      responses:
        "201":
          description: User creation successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
  ## -- /task -- ##
  /task:
    get:
      description: Retrieve all tasks
      operationId: fetchAllTasks
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        default:
          description: Undocumented response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Create Task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Created Successfully
        default:
          description: Undocumented response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  ## -- /task/{taskid} -- ##
  /task/{taskid}:
    get:
      description: Retrieve the selected task
      operationId: getTask
      parameters:
        - name: taskid
          description: Task id of the task to be fetched
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Undocumented response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Delete the selected task
      operationId: deleteTask
      parameters:
        - name: taskid
          description: Task id of the task to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OK
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Undocumented response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        description:
          type: string

    LoginDetails:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    UserDetails:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: object
          properties:
            username:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
            mobileNumber:
              type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
            
    Role:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string

    Task:
      type: object
      required:
        - description
        - iscompleted
      properties:
        id:
          type: string
        description:
          type: string
        iscompleted:
          type: boolean
        createdby:
          type: string
        createdon:
          type: string
